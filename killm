#!/bin/bash
# shell script to remove all of my IPC keys
# Modified by Robert Martin to work on Mac 10.4, due to IPCS requiring sudo to list any 
# shared memory usage, even if you own it; also modified using Jim Wyllie's "kill 
# all related processes" idea

ION_OPEN_SOURCE=1
OS_VERS=""
NOT_KILLED=""
PS_LIST=""

# Fix for SourceForge Bug #60, killm IPC cleanup fails for long account names
# Since ipcs truncates usernames to 10 characters, we need to match against a
# truncated username so we trim the username to 10 characters.
# NOTE: This may cause conflicts with long usernames with similar beginning
#       characters. We'll look for a more robust solution in the near future.
USERNAME_CUT=`echo $USER | cut -c 1-10`
KILLPROCESSLIST="acsadmin lt-acsadmin \
	acslist lt-acslist \
	aoslsi lt-aoslsi \
	aoslso lt-aoslso \
	bibeadmin lt-bibeadmin \
	bibeclo lt-bibeclo \
	bpadmin lt-bpadmin \
	bpcancel lt-bpcancel \
	bpchat lt-bpchat \
	bpclm lt-bpclm \
	bpclock lt-bpclock \
	bpcounter lt-bpcounter \
	bpdriver lt-bpdriver \
	bpecho lt-bpecho \
	bping lt-bping \
	bplist lt-bplist \
	bpnmtest lt-bpnmtest \
	bprecvfile lt-bprecvfile \
	bpsecadmin lt-bpsecadmin \
	bpsendfile lt-bpsendfile \
	bpsink lt-bpsink \
	bpsource lt-bpsource \
	bpstats lt-bpstats \
	bpstats2 lt-bpstats2 \
	bptrace lt-bptrace \
	bptransit lt-bptransit \
	brsccla lt-brsccla \
	brsscla lt-brsscla \
	bsscounter lt-bsscounter \
	bssdriver lt-bssdriver \
	bsspadmin lt-bsspadmin \
	bsspcli lt-bsspcli \
	bsspclo lt-bsspclo \
	bsspclock lt-bsspclock \
	bssrecv lt-bssrecv \
	bssStreamingApp lt-bssStreamingApp \
	cgrfetch lt-cgrfetch \
	cpsd lt-cpsd \
	dccpcli lt-dccpcli \
	dccpclo lt-dccpclo \
	dccplsi lt-dccplsi \
	dccplso lt-dccplso \
	dgr2file lt-dgr2file \
	dgrcli lt-dgrcli \
	dgrclo lt-dgrclo \
	dtka lt-dtka \
	dtkaadmin lt-dtkaadmin \
	dtn2admin lt-dtn2admin \
	dtn2adminep lt-dtn2adminep \
	dtn2fw lt-dtn2fw \
	dtpcadmin lt-dtpcadmin \
	dtpcclock lt-dtpcclock \
	dtpcd lt-dtpcd \
	dtpcreceive lt-dtpcreceive \
	dtpcsend lt-dtpcsend \
	file2dgr lt-file2dgr \
	file2sdr lt-file2sdr \
	file2sm lt-file2sm \
	file2tcp lt-file2tcp \
	file2udp lt-file2udp \
	hmackeys lt-hmackeys \
	imcadmin lt-imcadmin \
	imcadminep lt-imcadminep \
	imcfw lt-imcfw \
	ionadmin lt-ionadmin \
	ionexit lt-ionexit \
	ionrestart lt-ionrestart \
	ionsecadmin lt-ionsecadmin \
	ionunlock lt-ionunlock \
	ionwarn lt-ionwarn \
	ipnadmin lt-ipnadmin \
	ipnadminep lt-ipnadminep \
	ipnd lt-ipnd \
	ipnfw lt-ipnfw \
	lgagent lt-lgagent \
	lgsend lt-lgsend \
	ltpadmin lt-ltpadmin \
	ltpcli lt-ltpcli \
	ltpclo lt-ltpclo \
	ltpclock lt-ltpclock \
	ltpcounter lt-ltpcounter \
	ltpdeliv lt-ltpdeliv \
	ltpdriver lt-ltpdriver \
	ltpmeter lt-ltpmeter \
	ltpsecadmin lt-ltpsecadmin \
	nm_agent lt-nm_agent \
	nm_mgr lt-nm_mgr \
	owltsim lt-owltsim \
	owlttb lt-owlttb \
	psmshell lt-psmshell \
	psmwatch lt-psmwatch \
	ramsgate lt-ramsgate \
	rfxclock lt-rfxclock \
	sdatest lt-sdatest \
	sdr2file lt-sdr2file \
	sdrmend lt-sdrmend \
	sdrwatch lt-sdrwatch \
	sm2file lt-sm2file \
	smlistsh lt-smlistsh \
	smrbtsh lt-smrbtsh \
	stcpcli lt-stcpcli \
	stcpclo lt-stcpclo \
	tcaadmin lt-tcaadmin\
	tcaboot lt-tcaboot\
	tcacompile lt-tcacompile\
	tcapublish lt-tcapublish\
	tcarecv lt-tcarecv\
	tcc lt-tcc\
	tccadmin lt-tccadmin \
	tcp2file lt-tcp2file \
	tcpbsi lt-tcpbsi \
	tcpbso lt-tcpbso \
	tcpcli lt-tcpcli \
	tcpclo lt-tcpclo \
	udp2file lt-udp2file \
	udpbsi lt-udpbsi \
	udpbso lt-udpbso \
	udpcli lt-udpcli \
	udpclo lt-udpclo \
	udplsi lt-udplsi \
	udplso lt-udplso \
	"

if [ "$ION_OPEN_SOURCE" == "1" ];then
KILLPROCESSLIST="${KILLPROCESSLIST} \
	amsbenchr lt-amsbenchr \
	amsbenchs lt-amsbenchs \
	amsd lt-amsd \
	amshello lt-amshello \
	amslog lt-amslog \
	amslogprt lt-amslogprt \
	amsshell lt-amsshell \
	amsstop lt-amsstop \
	bputa lt-bputa \
	cfdpadmin lt-cfdpadmin \
	cfdpclock lt-cfdpclock \
	cfdptest lt-cfdptest \
	bpcp lt-bpcp\
	bpcpd lt-bpcpd\
	"
fi

sw_vers 2> /dev/null > /dev/null

#if sw_vers ran, then we're on a mac system
if [[ ! $? ]]; then  
	OS_VERS=`sw_vers | grep 10.4`
fi

OSNAME=`uname`
if [ "$OSNAME" == "SunOS" ]; then
    killcmd="pkill"
else
    killcmd="killall"
fi

if [[ "$(uname -m)" == "x86_64" ]]; then
    PROCESS_LIMIT=64
else
    PROCESS_LIMIT=32
fi

echo "Sending TERM to ${KILLPROCESSLIST}..."
echo "${KILLPROCESSLIST}" | xargs -n $PROCESS_LIMIT $killcmd 2> /dev/null

sleep 2

echo "Sending KILL to the processes..."
echo "${KILLPROCESSLIST}" | xargs -n $PROCESS_LIMIT $killcmd -KILL 2> /dev/null

sleep 2

echo "Checking if all processes ended..."
# Creates a long regex search pattern that matches any process name
# Search pattern looks like:
#   ([^-a-zA-Z]bping$)|([^-a-zA-Z]bpecho$)|...
PATTERN_PREFIX='([^-a-zA-Z]'
PATTERN_POSTFIX='$)'
PATTERN="${PATTERN_PREFIX}""$(echo "${KILLPROCESSLIST}" | sed 's/\s*$//' | sed -E 's/\s+/'"${PATTERN_POSTFIX}|${PATTERN_PREFIX}"'/g')""${PATTERN_POSTFIX}"
NOT_KILLED="$(ps -e | grep -E "${PATTERN}" | grep -v grep)"

if [[ "$(echo -n "${NOT_KILLED}" | wc -l)" -gt 0  ]]; then
    echo "${NOT_KILLED}"
    PROCESSES="$(echo "${NOT_KILLED}" | awk '{print $NF}')"
    while read -r PROCESS; do
        echo "Unknown error: process '${PROCESS}' not killed...try rebooting?"
    done <<< "${PROCESSES}"
fi

echo "Deleting shared memory to remove SDR..."

if [[ -z "$OS_VERS" ]]; then 
	# For mac 10.5 and Linux
	for Q in `ipcs -q | grep $USERNAME_CUT | awk '{ print $2 }'`; do ipcrm -q $Q; done
	for M in `ipcs -m | grep $USERNAME_CUT | awk '{ print $2 }'`; do ipcrm -m $M; done
	for S in `ipcs -s | grep $USERNAME_CUT | awk '{ print $2 }'`; do ipcrm -s $S; done
else
	# For mac 10.4, since ipcs on it is weird.
	echo "Since ipcs on Apple OSX 10.4 is weird, this script (killm) needs to use sudo, and will ask for your password"
	for Q in `sudo ipcs -q | grep $USERNAME_CUT | awk '{ print $3 }'`; do ipcrm -Q $Q; done
	for M in `sudo ipcs -m | grep $USERNAME_CUT | awk '{ print $3 }'`; do ipcrm -M $M; done
	for S in `sudo ipcs -s | grep $USERNAME_CUT | awk '{ print $3 }'`; do ipcrm -S $S; done
fi

echo "Killm completed."	
