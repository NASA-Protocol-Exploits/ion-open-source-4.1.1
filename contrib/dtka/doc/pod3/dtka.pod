=head1 NAME

dtka - Delay-Tolerant Key Administration

=head1 SYNOPSIS

This page provides an overview of the DTKA system, which runs as application
tasks in ION nodes.  There is no DTKA application programming interface,
and access to the keys managed by DTKA is offered only through ION's internal
security database system.  ION applications never exercise the security
mechanisms directly; the Bundle Protocol and Licklider Transmission
Protocol exercise these mechanisms on the application's behalf.

=head1 DESCRIPTION

The DTKA system provides a trustworthy framework for delay-tolerant
distribution of public keys, enabling ION's BP and LTP implementations
to utilize asymmetric cryptography to ensure the integrity and/or
confidentiality of data exchange as necessary.  (Discussion of asymmetric
cryptography is beyond the scope of this manual page.)

A central principle of DTKA is that keys have B<effective times> which
condition the applicability of the keys.  For example, the public key that
must be used to encrypt a bundle payload destined for a given "user" node is
the public key (asserted by that node) whose associated effective time is
greatest among all of that node's public keys whose associated effective times
are less than or equal to the creation time of the bundle.  Effective times
enable keys to be distributed far in advance of the times at which they will
be needed, which is what makes DTKA delay-tolerant: when the time arrives
at which a node needs a given key, the key is already in place.

The DTKA framework comprises (a) a distributed key authority, which should
include several geographically distributed "key authority" nodes, and (b)
user nodes which utilize the distributed key authority, nominally including
the key authority nodes themselves.  The framework is designed to convey
every participating user node's public keys to all user nodes, in a
trustworthy manner, prior to the times at which those keys become effective.
It operates as follows.

The B<knclock> daemon running on each DTKA "user" node periodically generates
public/private key pairs that will be effective at times in the future.  The
first public key generated by a given user node is produced while the user
node is under the physical control of the human agency that manages the key
authority, or of some other entity which is trusted by the key authority;
that key is provided to the key authority in some trusted out-of-band manner.

Each subsequently generated public key is signed in the applicable private
key of the user node and is multicast to all members of the distributed key
authority.  The multicast keys are received by key authority nodes' B<karecv>
daemons, which validate the received keys by using the sending nodes'
corresponding public keys to check the attached signatures.

Periodically, the B<kacompile> daemons of all members of the distributed key
authority simultaneously compile "bulletins" of all public keys recently
received from user nodes.  These daemons then all multicast their bulletins to
all authority nodes' B<kapublish> daemons.

The B<kapublish> daemons then compute a common consensus bulletin, which
includes all newly asserted public keys that all of the key authority nodes
have received and found trustworthy.  Each B<kapublish> daemon then computes
a hash for the bulletin and erasure-codes the bulletin, producing a list of
code blocks; the hashes and lists of blocks will be identical for all key
authority nodes.  It then multicasts to all user nodes a small subset of
the list of code blocks; the subsets multicast by all B<kapublish> daemons
are different.  Each  code block is tagged with the common bulletin hash.

The multicast code blocks are received by user nodes' B<knmgr> daemons,
which use them to reassemble the bulletins.  Code blocks with differing
bulletin hashes are not used to reassemble the same bulletin, and the
erasure coding of the bulletins prevents failure to receive all code blocks
from preventing reassembly of the complete bulletin.  When a bulletin has
been successfully reassembled, the public keys in the bulletin are recorded
in the user node's security database.

Public key revocations, submitted by the human agency that manages the
distributed key authority, are processed in the same way as assertions of new
public keys.

The B<kaboot>, B<kaadmin>, and B<knadmin> utilities are used to configure
the DTKA operations of key authority and DTKA user nodes.

=head1 SEE ALSO

kaboot(1), kaadmin(1), karecv(1), kacompile(1), kapublish(1), knadmin(1), knclock(1), knmgr(1)
